package com.docker.vulnerability.scanner.dockerscanback.service;

import com.docker.vulnerability.scanner.dockerscanback.config.security.JwtTokenUtil;
import com.docker.vulnerability.scanner.dockerscanback.dto.UserTokenDto;
import com.docker.vulnerability.scanner.dockerscanback.entity.UserToken;
import com.docker.vulnerability.scanner.dockerscanback.mapper.UserTokenMapper;
import com.docker.vulnerability.scanner.dockerscanback.repository.UserTokenRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import javax.mail.MessagingException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.UnsupportedEncodingException;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class UserService {

    @Qualifier("emailTemplateEngine")
    private final TemplateEngine emailTemplateEngine;
    private final JavaMailSender mailSender;
    private static final String EMAIL_SIMPLE_TEMPLATE_NAME = "mail/email.html";
    private static final String FROM = "pateli-test@outlook.com";
    private final UserTokenMapper userTokenMapper;
    private final UserTokenRepository userTokenRepository;
    private final JwtTokenUtil jwtTokenUtil;
    private final AuthenticationManager authenticationManager;

    public void sendEmail(UserTokenDto userTokenDto) throws MessagingException, UnsupportedEncodingException {
        JavaMailSenderImpl javaMailSender = (JavaMailSenderImpl) this.mailSender;
        javaMailSender.setHost("smtp-mail.outlook.com");

        String token = jwtTokenUtil.generateToken(userTokenDto.getEmail());
        final Context ctx = new Context();
        ctx.setVariable("token", token);
        ctx.setVariable("link", "http://localhost:4200" + "/token");

        final MimeMessage mimeMessage = this.mailSender.createMimeMessage();
        final MimeMessageHelper message = new MimeMessageHelper(mimeMessage, "UTF-8");
        message.setSubject("Token Generation");
        message.setFrom(new InternetAddress(FROM, "Sadoc"));
        message.setTo(userTokenDto.getEmail());

        Optional<UserToken> userToken = userTokenRepository.findByEmail(userTokenDto.getEmail());
        if (userToken.isPresent()) {
            userToken.get().setToken(token);
        } else {
            userToken = Optional.ofNullable(userTokenMapper.map(userTokenDto));
            userToken.get().setToken(token);
        }
        userTokenRepository.save(userToken.get());

        final String htmlContent = this.emailTemplateEngine.process(EMAIL_SIMPLE_TEMPLATE_NAME, ctx);
        message.setText(htmlContent, true);
        this.mailSender.send(mimeMessage);
    }

    public UserTokenDto authenticate(UserTokenDto userTokenDto) throws Exception {
        Optional<UserToken> userToken = userTokenRepository.findByToken(userTokenDto.getToken());
        if (userToken.isPresent()) {
            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(userToken.get().getEmail(), "password"));
            return userTokenMapper.map(userToken.get());
        } else {
            throw new Exception("Unauthenticated user");
        }
    }

    @Transactional
    public void logoutUser(HttpServletRequest request, HttpServletResponse response) {
        this.userTokenRepository.deleteByToken(request.getHeader("JWT_TOKEN"));
        response.addHeader("X-LOGOUT-SUCCESS", "true");
    }

}
