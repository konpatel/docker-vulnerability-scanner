import {Component, OnInit} from '@angular/core';
import {ImageDto} from "../../dtos/imageDto";
import {MatTableDataSource} from "@angular/material/table";
import {ActivatedRoute, Router} from "@angular/router";
import {DockerService} from "../../services/docker.service";
import {FormControl, FormGroup} from "@angular/forms";
import {UserImageDto} from "../../dtos/userImageDto";
import {ARR} from "./arr";
import {ScanObject} from "./scanObject";
import {CvsObject} from "./cvsObject";

@Component({
  selector: 'app-registry-image',
  templateUrl: './registry-image.component.html',
  styleUrls: ['./registry-image.component.scss']
})
export class RegistryImageComponent implements OnInit {
  messages: string[] = [];
  scanResults: ScanObject[] = [];
  displayedColumns: string[] = ['repository', 'tag', 'pulledOn', 'actions'];
  dataSource: MatTableDataSource<ImageDto> = new MatTableDataSource<ImageDto>();

  imageForm: FormGroup = new FormGroup({
    repository: new FormControl(),
    tag: new FormControl()
  });

  constructor(private router: Router, private route: ActivatedRoute,
              private dockerService: DockerService) {
  }

  ngOnInit(): void {
    this.getAllImagesByUser();
  }

  scan(imageDto: ImageDto): void {
    const arr: any = ARR;
    console.log(arr?.vulnerabilities);
    arr?.vulnerabilities.forEach((vulnerability: any) => {
      const scanObj: ScanObject = new ScanObject();
      const cvsObject: CvsObject = new CvsObject();
      cvsObject.CVE = vulnerability.identifiers?.CVE;
      cvsObject.CWE = vulnerability.identifiers?.CWE;
      scanObj.id = vulnerability.id;
      scanObj.title = vulnerability.title;
      scanObj.packageName = vulnerability.packageName;
      scanObj.name = vulnerability.name;
      scanObj.version = vulnerability.version;
      scanObj.severity = vulnerability.severity;
      scanObj.cvssScore = vulnerability.cvssScore;
      scanObj.identifiers = cvsObject;
      scanObj.description = vulnerability.description;
      this.scanResults.push(scanObj);
    });

    const downloadJson = JSON.stringify(this.scanResults);
    const blob = new Blob([downloadJson as any], {type: 'application/json'});

    const a = document.createElement('a')
    const objectUrl = URL.createObjectURL(blob)
    a.href = objectUrl
    a.download = 'image.json';
    a.click();
    URL.revokeObjectURL(objectUrl);
    // this.dockerService.scanImage(imageDto).subscribe((scan) => {
    //   console.log(scan);
    // });
  }

  save(): void {
    const imageDto: ImageDto = this.imageForm?.value;
    const email: string | null = sessionStorage.getItem('email');
    const userImage: UserImageDto = {
      email: email,
      image: imageDto
    };
    this.dockerService.saveImage(userImage).subscribe((image) => {
      this.reset();
      this.getAllImagesByUser();
    });
  }

  private getAllImagesByUser(): void {
    const email: string | null = sessionStorage.getItem('email');
    this.dockerService.getAllImagesByUser(email).add(() => this.dataSource = new MatTableDataSource<ImageDto>(this.dockerService.images));
  }

  reset(): void {
    this.imageForm.reset();
  }

  clear(): void {
    this.messages = [];
  }

  deleteImage(id: string): void {
    this.dockerService.deleteImage(id).subscribe(() =>
      console.log('images deleted')).add(() => this.getAllImagesByUser());
  }

}
